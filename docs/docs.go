// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {},
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/bitcoin/price": {
            "get": {
                "description": "Fetch the current Bitcoin price from an blockchain.info API",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "bitcoin"
                ],
                "summary": "Get Bitcoin price",
                "responses": {
                    "200": {
                        "description": "API result",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Failed to fetch Bitcoin price",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/webconnect/connect/{id}": {
            "get": {
                "description": "Connect to an existing WebSocket by ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "webconnect"
                ],
                "summary": "Connect to an existing WebSocket",
                "parameters": [
                    {
                        "type": "string",
                        "description": "WebSocket ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Connection established",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Invalid input",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/webconnect/new/{channel}": {
            "get": {
                "description": "Create a new WebSocket connection for a given channel",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "webconnect"
                ],
                "summary": "Create a new WebSocket connection",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Channel",
                        "name": "channel",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Local description for WebRTC",
                        "name": "localdesc",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "WebSocket connection established",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Invalid input",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/youtube/download/{type}/{id}": {
            "get": {
                "description": "Download a YouTube video or audio file by type and ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/octet-stream"
                ],
                "tags": [
                    "youtube"
                ],
                "summary": "Download YouTube video or audio",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Type (video or audio)",
                        "name": "type",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Video ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "File stream",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Invalid input",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/youtube/subscriptions/{token}": {
            "get": {
                "description": "Fetch a list of YouTube subscription videos for a given token",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "youtube"
                ],
                "summary": "Get YouTube subscriptions",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Token",
                        "name": "token",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/main.SubscriptionsResult"
                        }
                    },
                    "400": {
                        "description": "Invalid input",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "No content found for this token",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "main.SubscriptionsResult": {
            "type": "object",
            "properties": {
                "subscriptions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/youtube.VideoContent"
                    }
                }
            }
        },
        "youtube.VideoContent": {
            "type": "object",
            "properties": {
                "author_name": {
                    "type": "string"
                },
                "published_date": {
                    "type": "string"
                },
                "video_id": {
                    "type": "string"
                },
                "video_title": {
                    "type": "string"
                }
            }
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "3.0",
	Host:             "api.arfevrier.fr",
	BasePath:         "/v3",
	Schemes:          []string{"https"},
	Title:            "API arfevrier.fr",
	Description:      "",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
